<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | bitJudo]]></title>
  <link href="http://bitjudo.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://bitjudo.com/"/>
  <updated>2014-06-09T20:42:21-04:00</updated>
  <id>http://bitjudo.com/</id>
  <author>
    <name><![CDATA[a couple of geeks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Partial Continuous Deployment with Docker and SaltStack]]></title>
    <link href="http://bitjudo.com/blog/2014/05/13/partial-continuous-deployment-with-docker-and-saltstack/"/>
    <updated>2014-05-13T21:10:57-04:00</updated>
    <id>http://bitjudo.com/blog/2014/05/13/partial-continuous-deployment-with-docker-and-saltstack</id>
    <content type="html"><![CDATA[<p>If you haven&rsquo;t figured out by now, I&rsquo;m a big fan of both <a href="http://www.docker.io">Docker</a> and <a href="http://www.saltstack.com">SaltStack</a>. I&rsquo;ve been using them both separately for a while now, but recently started using them together. Here&rsquo;s my first iteration of continuous deployment using Docker and SaltStack.</p>

<p>This article will show you how to use <code>SaltStack</code> to re-deploy a container when a new version becomes available. I&rsquo;ve made a few assumptions: (1) you know what Docker and SaltStack are, (2) you understand what a SaltStack State is, and (3) that you will use a docker index/registry to pull in your docker images (check out my <a href="https://github.com/ekristen/docker-index">docker-index</a> project).</p>

<p>This post will break down the state file to explain each step, so even if you are not a Salt guru it should generally make sense. I won&rsquo;t cover building docker images or how to trigger SaltStack to run the state file. (That might come in a future article.)</p>

<!-- more -->


<h1>The Salt State</h1>

<p>What makes this all possible is a crafting a SaltStack state to run certain commands when certain conditions apply. For example you can have the state stop a running container if a new version of an image is available, but if the image hasn&rsquo;t changed then do nothing.</p>

<p>For the rest of this article we&rsquo;ll be using <a href="https://github.com/ekristen/docker-index">docker index</a> (just an application I wrote) as the example application to deploy.</p>

<p>If you want to skip the explanation and just grab the whole state file, jump down the page a bit.</p>

<h2>The State Explained</h2>

<h3>Step 1 &ndash; Always Pull the Most Recent Image</h3>

<p>First we want to make sure to <strong>ALWAYS</strong> pull the latest image. We use different tags based on the environment, <code>:dev</code> for dev, <code>:qa</code> for quality assurance, <code>:prod</code> for production. This allows taggging specific versions for release to different environments, but also allows us to tag an application as its version number plus the environment it goes to. By making the state always perform a pull we make sure that the latest image pushed to the registry is pulled down and ready.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-index.sls </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">docker_index_image</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">docker.pulled:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">index.docker.io/ekristen/docker-index:dev</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">force</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">True</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">100</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Step 2 &mdash; Stop If New Image Available</h3>

<p>Next, we check and see if the latest version is running. We want the state to be idempotent if possible.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-index.sls </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">docker_index_stop_if_old</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">cmd.run:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker stop docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">unless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker inspect --format &quot;{{ .Image }}&quot; docker_index | grep $(docker images | grep &quot;index.docker.io/ekristen/docker-index:dev&quot; | awk &#39;{ print $3 }&#39;)</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">docker</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_image</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">111</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>unless</code> basically looks at the list of available images and grabs the unique hash of <code>index.docker.io/ekristen/docker-index:dev</code> and then greps the <code>.Image</code> value from the <code>inspect</code> command of the current running container named <code>docker-index</code>. This works because in <strong>Step 1</strong> we made sure we pulled down the latest version of the <code>dev</code> tag.</p>

<h3>Step 3 &ndash; Remove If We Stopped</h3>

<p>If we stopped the container in <strong>Step 2</strong> then we want to also remove the container so that we can re-deploy it in <strong>Step 3</strong> and start it in <strong>Step 4</strong>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-index.sls </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">docker_index_remove_if_old</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">cmd.run:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker rm docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">unless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker inspect --format &quot;{{ .Image }}&quot; docker_index | grep $(docker images | grep &quot;index.docker.io/ekristen/docker-index:dev&quot; | awk &#39;{ print $3 }&#39;)</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cmd</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_stop_if_old</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">112</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>unless</code> does the same as in <strong>Step 2</strong> and checks to ensure the existing container is using a different image then the latest one.</p>

<h3>Step 4 &ndash; Create the Container</h3>

<p>Now that we have successfully stopped and removed the old container, we can install the new container, and start it up (<strong>Step 5</strong>)</p>

<p>This part of the state defines the container and installs it but does not start it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-index.sls </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">docker_index_container</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">docker.installed:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">index.docker.io/ekristen/docker-index:dev</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;REDIS_HOST&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;192.168.1.100&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;REDIS_PORT&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;6379&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;PORT&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;5100&quot;</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;5100/tcp&quot;</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">docker</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_image</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">120</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Step 5 &ndash; Start the Container</h3>

<p>We are almost done. Finally we want to make sure the container is running.</p>

<p><strong>Note:</strong> Unfortunately the documentation on the docker states is still pretty rough. Pay close attention when you are defining port bindings, they must be double indented to work properly!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-index.sls </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">docker_index_running</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">docker.running:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- container</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">port_bindings</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="s">&quot;5001/tcp&quot;</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">HostIp</span><span class="p-Indicator">:</span> <span class="s">&quot;0.0.0.0&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">HostPort</span><span class="p-Indicator">:</span> <span class="s">&quot;5100&quot;</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">docker</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_container</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">121</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>The Whole State</h2>

<p>Here is the state file in its entirety.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-index.sls </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">docker_index_image</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">docker.pulled:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">index.docker.io/ekristen/docker-index:dev</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">force</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">True</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">100</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;docker_index_stop_if_old</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">cmd.run:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker stop docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">unless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker inspect --format &quot;{{ .Image }}&quot; docker_index | grep $(docker images | grep &quot;index.docker.io/ekristen/docker-index:dev&quot; | awk &#39;{ print $3 }&#39;)</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">docker</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_image</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">111</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;docker_index_remove_if_old</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">cmd.run:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker rm docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">unless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker inspect --format &quot;{{ .Image }}&quot; docker_index | grep $(docker images | grep &quot;index.docker.io/ekristen/docker-index:dev&quot; | awk &#39;{ print $3 }&#39;)</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cmd</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_stop_if_old</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">112</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;docker_index_container</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">docker.installed:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">index.docker.io/ekristen/docker-index:dev</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;REDIS_HOST&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;192.168.1.100&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;REDIS_PORT&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;6379&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;PORT&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;5100&quot;</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;5100/tcp&quot;</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">docker</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_image</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">120</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;docker_index_running</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">docker.running:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- container</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">port_bindings</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="s">&quot;5001/tcp&quot;</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">HostIp</span><span class="p-Indicator">:</span> <span class="s">&quot;0.0.0.0&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">HostPort</span><span class="p-Indicator">:</span> <span class="s">&quot;5100&quot;</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">docker</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_container</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">121</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Conclusion</h1>

<p>This solution works fairly well for my purpose. Docker is fast, and I plan to use this in a rolling restart configuration in production. The fact that it first stops the running container, removes it and then starts the new one isn&rsquo;t a big deal for me. In my other environments, a few second hiccup is perfectly acceptable while the old is removed and the new is started.</p>

<p>I also have a few other tricks with Docker that I hope to be writing about soon, so please check back, and let me know what you thought about this article.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Scripts - Updated]]></title>
    <link href="http://bitjudo.com/blog/2014/05/07/docker-scripts-updated/"/>
    <updated>2014-05-07T21:35:28-04:00</updated>
    <id>http://bitjudo.com/blog/2014/05/07/docker-scripts-updated</id>
    <content type="html"><![CDATA[<p>In a follow up to the original post <a href="">Docker Scripts</a>, Docker has made it so that you no longer need to have <code>jq</code> installed, you can do everything with the <code>docker</code> client&rsquo;s inspect command and its (semi)new format feature.</p>

<p>I&rsquo;ve updated the scripts to use the format command.</p>

<!-- more -->


<h2>Update Scripts</h2>

<h3>docker-get-ip</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-get-ip </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Usage: docker-get-ip <span class="o">(</span>name or sha<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> -n &amp;ldquo;<span class="nv">$1</span>&amp;rdquo; <span class="o">]</span> &amp;amp;&amp;amp; docker inspect &amp;mdash;format &amp;ldquo;<span class="o">}}</span>&amp;rdquo; <span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>docker-get-id</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-get-id </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Usage: docker-get-id <span class="o">(</span>friendly-name<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> -n &amp;ldquo;<span class="nv">$1</span>&amp;rdquo; <span class="o">]</span> &amp;amp;&amp;amp; docker inspect &amp;mdash;format &amp;ldquo;<span class="o">}}</span>&amp;rdquo; <span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>docker-get-image</h3>

<p>I find this one useful for DevOps uses, when I have the friendly name, I can compare the current running container&rsquo;s image with the one I expect it to have (like an update) and redeploy.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-get-image </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Usage: docker-get-image <span class="o">(</span>friendly-name<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> -n &amp;ldquo;<span class="nv">$1</span>&amp;rdquo; <span class="o">]</span> &amp;amp;&amp;amp; docker inspect &amp;mdash;format &amp;ldquo;<span class="o">}}</span>&amp;rdquo; <span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>docker-get-state</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-get-state </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Usage: docker-get-state <span class="o">(</span>friendly-name<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> -n &amp;ldquo;<span class="nv">$1</span>&amp;rdquo; <span class="o">]</span> &amp;amp;&amp;amp; docker inspect &amp;mdash;format &amp;ldquo;<span class="o">}}</span>&amp;rdquo; <span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Conclusion</h2>

<p>These are just easy shortcuts, I&rsquo;m sure you can write these in different ways or as aliases. Perhaps others will find this useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just in Time Encryption Keys using SaltStack]]></title>
    <link href="http://bitjudo.com/blog/2014/03/19/just-in-time-encryption-keys-using-saltstack/"/>
    <updated>2014-03-19T11:15:00-04:00</updated>
    <id>http://bitjudo.com/blog/2014/03/19/just-in-time-encryption-keys-using-saltstack</id>
    <content type="html"><![CDATA[<p>Recently, I was challenged with ensuring the encryption of all data at rest for several servers.  Unlike laptops or desktops, server nodes need to be able to come up and down in response to various requests. When spinning up multiple nodes you definitely don’t want them waiting for human interaction. Enter SaltStack and LUKS volumes. The real challenge was how to provide full disk encryption without storing the encryption key itself on the server.</p>

<p>Since these were Linux servers, LUKS encryption made the most sense. In essence what this tutorial describes is a way to provide “just in time” delivery of disk encryption keys. This is done using SaltStack features.</p>

<p>The rest of this article is a TL;DR combined with a tutorial of sorts to help you set this up.</p>

<h2>TL;DR</h2>

<p>By taking advantage of a couple features that <a href="http://www.saltstack.com/">SaltStack</a> brings to the table, it is possible to automate the mounting of your LUKS volumes after the server has started. The salt minion has the ability to run certain states (scripts) upon start.  This allows the user to run a LUKS state that will verify the existence of the volume, unlock it, and mount it. Using salt states also allows the user to build state dependencies, or trigger other states to run.  These features ensure that any services requiring the encrypted volume only start after the volume is available.</p>

<!-- more -->


<h2>How it Works</h2>

<p>Upon initializing of SaltStack, the configuration tells the Salt minion to run two scripts.  One script is the LUKS encryption script, which confirms that the LUKS volume exists, then unlocks and mounts it.  When the LUKS script runs, it requests pillar data from the Salt master.  Included in the requested data is the LUKS encryption key, which is transferred using zeromq and AES encryption. The key is temporarily stored locally on the minion while the script runs, and is deleted upon completion.</p>

<p>The second script checks whether a particular service is dependent upon the encrypted volume is running.  If the specific service is found to not be running, the script will also initialize it.  In this particular case, the service is a mongodb service.</p>

<p>Ultimately, we end up with the ability to mount an encrypted drive and start dependent services.  However, we have relegated the encryption key to a single separate server and only temporarily transfer it to the servers that need it, exactly when they need it.  In simpler terms, we’ve created a just-in-time delivery mechanism for an encryption key.  While this method may not be bulletproof, I have found it preferable to storing the encryption key permanently on the same server as the paired encrypted drive.</p>

<h2>The Quasi How-To</h2>

<p>The below does not cover setup and/or configuring SaltStack, LVM or LUKS encryption.  Rather, it’s an example of salt state and pillar files, some steps you can use to get going. It should be pretty straightforward.</p>

<h3>The Salt State</h3>

<p>I originally found this state and after a little bit of searching I cannot find the original place I found it, but I ended up modifying it a bit for my needs. If you know where it originally came from, let me know and I’ll make a note. The state ensures that the LVM I need is setup and then sets up the LUKS volume. If all that is already setup then the script will simply unlock and mount the LUKS volume at the the defined mount point.</p>

<p><em>Assumptions:</em> You have a non-formatted drive attached to the server and you&rsquo;ve defined that in your pillar data, make sure you assign the correct drive device, otherwise you might end up erasing data.</p>

<p><div><script src='https://gist.github.com/9541650.js?file=luks.state'></script>
<noscript><pre><code>{% set password = pillar['encryption']['password'] %}
{% set devname = pillar['encryption']['dev_name'] %}
{% set volgroup = pillar['encryption']['vg_name'] %}
{% set mountpoint = pillar['encryption']['mountpoint'] %}

crypto-package:
  pkg:
    - name: cryptsetup
    - order: 10
    - installed

lvm2-package:
  pkg:
    - name: lvm2
    - order: 11
    - installed

{{ devname }}:
  lvm.pv_present:
    - order: 12

vg{{ volgroup }}:
  lvm.vg_present:
    - devices: {{ devname }}
    - order: 13

lv{{ mountpoint }}:
  cmd.run:
    - unless: lvdisplay /dev/vg{{ volgroup}}/lv{{ volgroup }}
    - name: lvcreate -l 100%FREE -n lv{{ volgroup }} vg{{ volgroup }}
    - order: 14

enc_volume:
  cmd.run:
    - unless: cryptsetup luksUUID /dev/vg{{ volgroup }}/lv{{ mountpoint }}
    - name: echo &quot;{{ password }}&quot; | cryptsetup luksFormat /dev/vg{{ volgroup }}/lv{{ mountpoint }}
    - order: 15

enc_volume_open:
  cmd.run:
    - unless: stat /dev/mapper/{{ mountpoint }}
    - name: echo &quot;{{ password }}&quot; | cryptsetup luksOpen /dev/vg{{ volgroup }}/lv{{ mountpoint }} {{ mountpoint }}
    - order: 16

enc_volume_format:
  cmd.run:
    - unless: lsblk -f /dev/mapper/{{ mountpoint }} | grep ext4
    - name: mkfs.ext4 /dev/mapper/{{ mountpoint }}
    - order: 17

enc_volume_mount:
  mount.mounted:
    - name: /{{ mountpoint }}
    - device: /dev/mapper/{{ mountpoint }}
    - fstype: ext4
    - mkmnt: True
    - opts: noatime,nodiratime
    - persist: False
    - order: 18
</code></pre></noscript></div>
</p>

<p><strong>Note:</strong> Please note that this state will create the LVM physical and logical volumes or attempt too if that fails LUKS and mounting will fail too.</p>

<p><strong>Caveat:</strong> This script will initialize a single drive as part of an LVM, with some tweaking it could combine multiple drives. This script was design to bring a server up from scratch and have a LUKS volume mounted and ready to go.</p>

<h4>Extra Credit</h4>

<p>If you want to learn how to make states reliant on each other check out the <code>requires</code> directive in the salt documentation. If you want to notify states when another state is done running check out <code>require_in</code>.</p>

<h3>The Salt Pillar</h3>

<p>The pillar contains the configuration for the LVM and LUKS volumes and the mount point. Ensuring that you populate this pillar with the appropriate data is important.</p>

<ul>
<li><strong>password</strong> is the encryption key for the LUKS volume.</li>
<li><strong>vg_name</strong> is used to define both the volume group but the logical volume name too.</li>
<li><strong>mountpoint</strong> is where you want the LVM and LUKS volume to be mounted.</li>
<li><strong>dev_name</strong> is the device that you want converted to LVM and then LUKS encrypted.</li>
</ul>


<p><div><script src='https://gist.github.com/9541650.js?file=luks.pillar'></script>
<noscript><pre><code>encryption:
  password: some_random_long_string
  dev_name: /dev/sda1
  vg_name: data
  mountpoint: data</code></pre></noscript></div>
</p>

<p><strong>Note:</strong> I don&rsquo;t discuss how to do it, but you can duplicate this pillar and change the <strong>password</strong> for each server if you want.</p>

<h3>Putting it all together</h3>

<p>Assuming you&rsquo;ve associated the salt state and pillar to the appropriate target you&rsquo;ll be able to use <code>highstate</code> or <code>state.sls</code> to setup your LUKS encrypted drive. To make sure this happens each time the server starts up make sure you edit the minion&rsquo;s configuration and setup <code>startup_states</code> to <em>highstate</em>.</p>

<p>You should be able to tell the minion to run the LUKS state and find your drive mounted. Once that happens do a quick reboot, you should also find a few seconds to a minute after reboot your drive is mounted and accessible.</p>

<h2>Conclusion</h2>

<p>I&rsquo;m pretty happy with this solution, it allows my servers to be rebooted without human interaction and for the critical services to come online once their data is available. It keeps the encryption key from having to be stored on the server. Using this strategy you could easily expand this for other encryption technologies.</p>

<p>Thoughts, comments, questions? Let me hear from you. Leave your comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Scripts]]></title>
    <link href="http://bitjudo.com/blog/2014/03/11/docker-scripts/"/>
    <updated>2014-03-11T19:37:06-04:00</updated>
    <id>http://bitjudo.com/blog/2014/03/11/docker-scripts</id>
    <content type="html"><![CDATA[<p>David (the other author on this blog) and I have been doing a lot of work with docker with respect to our daily jobs. We ended up needed to orchestrate the management of multiple docker containers. This was before we discovered projects like <a href="https://github.com/toscanini/maestro">maestro</a> and <a href="https://github.com/signalfuse/maestro-ng">maetro-ng</a>. David found an awesome command line for parsing json called <a href="http://stedolan.github.io/jq/">jq</a> and put it to use by creating a bash one liner to grab a container&rsquo;s IP address.</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-get-ip </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Usage: docker-get-ip <span class="o">(</span>name or sha<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> -n &amp;ldquo;<span class="nv">$1</span>&amp;rdquo; <span class="o">]</span> &amp;amp;&amp;amp; docker inspect <span class="nv">$1</span> | jq -r &amp;lsquo;.<span class="o">[</span>0<span class="o">]</span> | .NetworkSettings | .IPAddress&amp;rsquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I took it one step further and created several more one liners to get other various pieces of information from containers.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-get-id </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Usage: docker-get-id <span class="o">(</span>friendly-name<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> -n &amp;ldquo;<span class="nv">$1</span>&amp;rdquo; <span class="o">]</span> &amp;amp;&amp;amp; docker inspect <span class="nv">$1</span> | jq -r &amp;lsquo;.<span class="o">[</span>0<span class="o">]</span> | .ID&amp;rsquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-get-port </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Usage: docker-get-port <span class="o">(</span>name|sha<span class="o">)</span> port/protocol&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> -n &amp;ldquo;<span class="nv">$1</span>&amp;rdquo; <span class="o">]</span> &amp;amp;&amp;amp; docker inspect <span class="nv">$1</span> | jq -r &amp;ldquo;.<span class="o">[</span>0<span class="o">]</span> | .NetworkSettings | .Ports | .<span class="o">[</span><span class="se">\&amp;</span>rdquo;<span class="nv">$2</span><span class="se">\&amp;</span>ldquo;<span class="o">]</span> | .<span class="o">[</span>0<span class="o">]</span> | .HostPort&amp;rdquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The great news is that with <code>jq</code>, you can create simple one liners for just about anything with the <code>docker inspect</code> command and drop them in <code>/usr/local/bin</code> and make your administrative life a little easier. I&rsquo;m sure there are more useful ones, but those are the top 3 that David and I use that make things more simple.</p>
]]></content>
  </entry>
  
</feed>

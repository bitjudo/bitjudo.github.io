<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | bitJudo]]></title>
  <link href="http://bitjudo.com/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://bitjudo.com/"/>
  <updated>2014-03-13T13:12:38-04:00</updated>
  <id>http://bitjudo.com/</id>
  <author>
    <name><![CDATA[a couple of geeks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Efficient Dockerfiles - Node.js]]></title>
    <link href="http://bitjudo.com/blog/2014/03/13/building-efficient-dockerfiles-node-dot-js/"/>
    <updated>2014-03-13T09:34:02-04:00</updated>
    <id>http://bitjudo.com/blog/2014/03/13/building-efficient-dockerfiles-node-dot-js</id>
    <content type="html"><![CDATA[<h1>TL;DR</h1>

<p>Use the following code snippet (or a variation) after all your app dependencies
but before you ADD your app code to the container&hellip; this way you don&rsquo;t rebuild
your modules each time you re-build your container. If your <code>package.json</code> file
changes then your modules will be rebuilt.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Add this to your Dockerfile <a href="https://gist.github.com/dweinstein/9468644">https://gist.github.com/dweinstein/9468644</a> gist </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ADD package.json /tmp/package.json
</span><span class='line'>RUN cd /tmp &amp;amp;&amp;amp; npm install
</span><span class='line'>RUN mkdir -p /opt/app &amp;amp;&amp;amp; cp -a /tmp/node_modules /opt/app/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Using cached layers for modules</h1>

<p>This article is about making efficient use of docker layers, and as a side
effect how to reduce development and debugging time for Node.js applications
hosted in Docker containers. As you migrate from developing everything on your
host system into Docker, there are some growing pains, mainly arround rapid
change and test workflows.</p>

<!-- more -->


<p>There was a time when each time I&rsquo;d make a slight modification to my
application, I&rsquo;d spend time waiting for my docker container to rebuild, usually
waiting for the modules to be reinstalled.  I&rsquo;d spend more time waiting for the
dependencies to rebuild than actually fixing the problem.  I hope this article
helps others get out of that ditch&hellip;</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>One key is to understand how Docker layers work. For now I&rsquo;ll direct you to the
<a href="http://docs.docker.io/en/latest/terms/layer/">documentation</a> to see the
graphic showing the various layers. Commands in your <code>Dockerfile</code> will create
new layers. When possible, docker will try to use an existing cached layer if
it&rsquo;s possible. You should try to take advantage of layers as much as possible
by organizing your commands in a specific order. We&rsquo;ll get into that order in a
second for dealing with node modules in your application.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Example &ndash; package.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">myApp</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">description</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">This</span> <span class="nx">is</span> <span class="nx">my</span> <span class="nx">awesome</span> <span class="nx">app</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">version</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="mf">0.0</span><span class="p">.</span><span class="mi">1</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="kr">private</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">scripts</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;start&quot;</span><span class="o">:</span> <span class="s2">&quot;node server.js&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">dependencies</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;docker.io&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;redis&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;restify&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This snippet should generally go after all dependencies for your application
have been installed, and just before you add your application&rsquo;s code to the
container.</p>

<p>So here&rsquo;s a full example:</p>

<p>```
FROM ubuntu
MAINTAINER David Weinstein <a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#111;&#58;&#x64;&#x61;&#118;&#x69;&#x64;&#64;&#x62;&#x69;&#x74;&#x6a;&#117;&#x64;&#111;&#46;&#99;&#111;&#x6d;">&#x64;&#97;&#118;&#105;&#x64;&#64;&#x62;&#x69;&#116;&#106;&#117;&#x64;&#x6f;&#x2e;&#99;&#111;&#x6d;</a></p>

<h1>install our dependencies and nodejs</h1>

<p>RUN echo &ldquo;deb <a href="http://archive.ubuntu.com/ubuntu">http://archive.ubuntu.com/ubuntu</a> precise main universe&rdquo; > /etc/apt/sources.list
RUN apt-get update
RUN apt-get -y install python-software-properties git build-essential
RUN add-apt-repository -y ppa:chris-lea/node.js
RUN apt-get update
RUN apt-get -y install nodejs</p>

<h1>use changes to package.json to force Docker not to use the cache</h1>

<h1>when we change our application&rsquo;s nodejs dependencies:</h1>

<p>ADD package.json /tmp/package.json
RUN cd /tmp &amp;&amp; npm install
RUN mkdir -p /opt/app &amp;&amp; cp -a /tmp/node_modules /opt/app/</p>

<h1>From here we load our application&rsquo;s code in, therefore the previous docker</h1>

<h1>&ldquo;layer&rdquo; thats been cached will be used if possible</h1>

<p>WORKDIR /opt/app
ADD . /opt/app</p>

<p>EXPOSE 3000</p>

<p>CMD [&ldquo;node&rdquo;, &ldquo;server.js&rdquo;]
```</p>

<p>The idea here is that if the <code>package.json</code> file changes (line 14) then Docker
will re-run the <code>npm install</code> sequence (line 15)&hellip; otherwise Docker will use
our cache and skip that part. This way our modules are cached so we aren&rsquo;t
rebuilding them every time we change our apps source code!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authentication for a Docker Registry]]></title>
    <link href="http://bitjudo.com/blog/2014/03/12/authentication-for-a-docker-registry/"/>
    <updated>2014-03-12T10:48:18-04:00</updated>
    <id>http://bitjudo.com/blog/2014/03/12/authentication-for-a-docker-registry</id>
    <content type="html"><![CDATA[<p>Docker is an amazing tool that has only been around for a short while, but has taken the DevOps world by storm, and organizations from small to large are starting to use it from integration testing, to dynamically scaling an application&rsquo;s environment.</p>

<p>Docker released an open-source registry that allows you to remote store images you create with docker, but what the did not release is an open-source index. The index is arguably (depending on your use case) the most important part, it handles the authentication layer of a registry. A registry can be used without and index, and if you are just wanting a place to store your images and you don&rsquo;t want to worry about who can access them, then no need to read on.</p>

<!-- more -->


<p>For my job I needed a way to host images securely, but still allow various people inside and outside my organization to access certain images, so in my spare time (and since no one had done it yet that I could find) I started writing an index using Node.JS. It is currently in its infancy, but it works as of right now.</p>

<p>The project lives on github at <a href="https://github.com/ekristen/docker-index">docker-index</a> and it is setup as a trusted build and deployed to the public docker registry/index at <a href="https://index.docker.io/u/ekristen/docker-index/.">https://index.docker.io/u/ekristen/docker-index/.</a> Just run <code>docker pull ekristen/docker-index</code> to get started. Specific instructions on how to get the registry, index, and redis working together can be found on the project&rsquo;s <a href="https://github.com/ekristen/docker-index/blob/master/README.md#how-to-use">README</a></p>

<p>It has only one dependency at this time and that is redis, that will most likely change to use mongodb or maybe even mysql to store users, permissions, and other index data, but redis was a quick and simple medium when doing the intial prototyping.</p>

<p>My future plans for the index are to create an admin interface that facilitates the management of users, namespaces, repositories and their associate permissions. For now all that has to be done by editing the configuration file.</p>

<p>This was a big help for me, hopefully having this code out there can help others too.</p>

<p>If you are interested in helping out pull requests are always welcome. If you have feedback, let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Scripts]]></title>
    <link href="http://bitjudo.com/blog/2014/03/11/docker-scripts/"/>
    <updated>2014-03-11T19:37:06-04:00</updated>
    <id>http://bitjudo.com/blog/2014/03/11/docker-scripts</id>
    <content type="html"><![CDATA[<p>David (the other author on this blog) and I have been doing a lot of work with docker with respect to our daily jobs. We ended up needed to orchestrate the management of multiple docker containers. This was before we discovered projects like <a href="https://github.com/toscanini/maestro">maestro</a> and <a href="https://github.com/signalfuse/maestro-ng">maetro-ng</a>. David found an awesome command line for parsing json called <a href="http://stedolan.github.io/jq/">jq</a> and put it to use by creating a bash one liner to grab a container&rsquo;s IP address.</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-get-ip </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Usage: docker-get-ip <span class="o">(</span>name or sha<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> -n &amp;ldquo;<span class="nv">$1</span>&amp;rdquo; <span class="o">]</span> &amp;amp;&amp;amp; docker inspect <span class="nv">$1</span> | jq -r &amp;lsquo;.<span class="o">[</span>0<span class="o">]</span> | .NetworkSettings | .IPAddress&amp;rsquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I took it one step further and created several more one liners to get other various pieces of information from containers.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-get-id </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Usage: docker-get-id <span class="o">(</span>friendly-name<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> -n &amp;ldquo;<span class="nv">$1</span>&amp;rdquo; <span class="o">]</span> &amp;amp;&amp;amp; docker inspect <span class="nv">$1</span> | jq -r &amp;lsquo;.<span class="o">[</span>0<span class="o">]</span> | .ID&amp;rsquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-get-port </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Usage: docker-get-port <span class="o">(</span>name|sha<span class="o">)</span> port/protocol&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> -n &amp;ldquo;<span class="nv">$1</span>&amp;rdquo; <span class="o">]</span> &amp;amp;&amp;amp; docker inspect <span class="nv">$1</span> | jq -r &amp;ldquo;.<span class="o">[</span>0<span class="o">]</span> | .NetworkSettings | .Ports | .<span class="o">[</span><span class="se">\&amp;</span>rdquo;<span class="nv">$2</span><span class="se">\&amp;</span>ldquo;<span class="o">]</span> | .<span class="o">[</span>0<span class="o">]</span> | .HostPort&amp;rdquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The great news is that with <code>jq</code>, you can create simple one liners for just about anything with the <code>docker inspect</code> command and drop them in <code>/usr/local/bin</code> and make your administrative life a little easier. I&rsquo;m sure there are more useful ones, but those are the top 3 that David and I use that make things more simple.</p>
]]></content>
  </entry>
  
</feed>

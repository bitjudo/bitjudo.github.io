<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | bitJudo]]></title>
  <link href="http://bitjudo.com/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://bitjudo.com/"/>
  <updated>2014-05-27T20:52:24-04:00</updated>
  <id>http://bitjudo.com/</id>
  <author>
    <name><![CDATA[a couple of geeks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Partial Continuous Deployment with Docker and SaltStack]]></title>
    <link href="http://bitjudo.com/blog/2014/05/13/partial-continuous-deployment-with-docker-and-saltstack/"/>
    <updated>2014-05-13T21:10:57-04:00</updated>
    <id>http://bitjudo.com/blog/2014/05/13/partial-continuous-deployment-with-docker-and-saltstack</id>
    <content type="html"><![CDATA[<p>If you haven&rsquo;t figured out by now, I&rsquo;m a big fan of both <a href="http://www.docker.io">Docker</a> and <a href="http://www.saltstack.com">SaltStack</a>. I&rsquo;ve been using them both separately for a while now, but recently started using them together. Here&rsquo;s my first iteration of continuous deployment using Docker and SaltStack.</p>

<p>This article will show you how to use <code>SaltStack</code> to re-deploy a container when a new version becomes available. I&rsquo;ve made a few assumptions: (1) you know what Docker and SaltStack are, (2) you understand what a SaltStack State is, and (3) that you will use a docker index/registry to pull in your docker images (check out my <a href="https://github.com/ekristen/docker-index">docker-index</a> project).</p>

<p>This post will break down the state file to explain each step, so even if you are not a Salt guru it should generally make sense. I won&rsquo;t cover building docker images or how to trigger SaltStack to run the state file. (That might come in a future article.)</p>

<!-- more -->


<h1>The Salt State</h1>

<p>What makes this all possible is a crafting a SaltStack state to run certain commands when certain conditions apply. For example you can have the state stop a running container if a new version of an image is available, but if the image hasn&rsquo;t changed then do nothing.</p>

<p>For the rest of this article we&rsquo;ll be using <a href="https://github.com/ekristen/docker-index">docker index</a> (just an application I wrote) as the example application to deploy.</p>

<p>If you want to skip the explanation and just grab the whole state file, jump down the page a bit.</p>

<h2>The State Explained</h2>

<h3>Step 1 &ndash; Always Pull the Most Recent Image</h3>

<p>First we want to make sure to <strong>ALWAYS</strong> pull the latest image. We use different tags based on the environment, <code>:dev</code> for dev, <code>:qa</code> for quality assurance, <code>:prod</code> for production. This allows taggging specific versions for release to different environments, but also allows us to tag an application as its version number plus the environment it goes to. By making the state always perform a pull we make sure that the latest image pushed to the registry is pulled down and ready.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-index.sls </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">docker_index_image</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">docker.pulled:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">index.docker.io/ekristen/docker-index:dev</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">force</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">True</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">100</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Step 2 &mdash; Stop If New Image Available</h3>

<p>Next, we check and see if the latest version is running. We want the state to be idempotent if possible.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-index.sls </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">docker_index_stop_if_old</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">cmd.run:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker stop docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">unless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker inspect --format &quot;{{ .Image }}&quot; docker_index | grep $(docker images | grep &quot;index.docker.io/ekristen/docker-index:dev&quot; | awk &#39;{ print $3 }&#39;)</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">docker</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_image</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">111</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>unless</code> basically looks at the list of available images and grabs the unique hash of <code>index.docker.io/ekristen/docker-index:dev</code> and then greps the <code>.Image</code> value from the <code>inspect</code> command of the current running container named <code>docker-index</code>. This works because in <strong>Step 1</strong> we made sure we pulled down the latest version of the <code>dev</code> tag.</p>

<h3>Step 3 &ndash; Remove If We Stopped</h3>

<p>If we stopped the container in <strong>Step 2</strong> then we want to also remove the container so that we can re-deploy it in <strong>Step 3</strong> and start it in <strong>Step 4</strong>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-index.sls </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">docker_index_remove_if_old</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">cmd.run:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker rm docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">unless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker inspect --format &quot;{{ .Image }}&quot; docker_index | grep $(docker images | grep &quot;index.docker.io/ekristen/docker-index:dev&quot; | awk &#39;{ print $3 }&#39;)</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cmd</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_stop_if_old</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">112</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>unless</code> does the same as in <strong>Step 2</strong> and checks to ensure the existing container is using a different image then the latest one.</p>

<h3>Step 4 &ndash; Create the Container</h3>

<p>Now that we have successfully stopped and removed the old container, we can install the new container, and start it up (<strong>Step 5</strong>)</p>

<p>This part of the state defines the container and installs it but does not start it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-index.sls </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">docker_index_container</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">docker.installed:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">index.docker.io/ekristen/docker-index:dev</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;REDIS_HOST&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;192.168.1.100&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;REDIS_PORT&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;6379&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;PORT&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;5100&quot;</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;5100/tcp&quot;</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">docker</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_image</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">120</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Step 5 &ndash; Start the Container</h3>

<p>We are almost done. Finally we want to make sure the container is running.</p>

<p><strong>Note:</strong> Unfortunately the documentation on the docker states is still pretty rough. Pay close attention when you are defining port bindings, they must be double indented to work properly!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-index.sls </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">docker_index_running</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">docker.running:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- container</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">port_bindings</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="s">&quot;5001/tcp&quot;</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">HostIp</span><span class="p-Indicator">:</span> <span class="s">&quot;0.0.0.0&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">HostPort</span><span class="p-Indicator">:</span> <span class="s">&quot;5100&quot;</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">docker</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_container</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">121</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>The Whole State</h2>

<p>Here is the state file in its entirety.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-index.sls </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">docker_index_image</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">docker.pulled:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">index.docker.io/ekristen/docker-index:dev</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">force</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">True</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">100</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;docker_index_stop_if_old</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">cmd.run:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker stop docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">unless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker inspect --format &quot;{{ .Image }}&quot; docker_index | grep $(docker images | grep &quot;index.docker.io/ekristen/docker-index:dev&quot; | awk &#39;{ print $3 }&#39;)</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">docker</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_image</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">111</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;docker_index_remove_if_old</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">cmd.run:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker rm docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">unless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker inspect --format &quot;{{ .Image }}&quot; docker_index | grep $(docker images | grep &quot;index.docker.io/ekristen/docker-index:dev&quot; | awk &#39;{ print $3 }&#39;)</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cmd</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_stop_if_old</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">112</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;docker_index_container</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">docker.installed:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">index.docker.io/ekristen/docker-index:dev</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;REDIS_HOST&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;192.168.1.100&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;REDIS_PORT&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;6379&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;PORT&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;5100&quot;</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;5100/tcp&quot;</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">docker</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_image</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">120</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;docker_index_running</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">docker.running:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- container</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">port_bindings</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="s">&quot;5001/tcp&quot;</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">HostIp</span><span class="p-Indicator">:</span> <span class="s">&quot;0.0.0.0&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">HostPort</span><span class="p-Indicator">:</span> <span class="s">&quot;5100&quot;</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">docker</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker_index_container</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">121</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Conclusion</h1>

<p>This solution works fairly well for my purpose. Docker is fast, and I plan to use this in a rolling restart configuration in production. The fact that it first stops the running container, removes it and then starts the new one isn&rsquo;t a big deal for me. In my other environments, a few second hiccup is perfectly acceptable while the old is removed and the new is started.</p>

<p>I also have a few other tricks with Docker that I hope to be writing about soon, so please check back, and let me know what you thought about this article.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Scripts - Updated]]></title>
    <link href="http://bitjudo.com/blog/2014/05/07/docker-scripts-updated/"/>
    <updated>2014-05-07T21:35:28-04:00</updated>
    <id>http://bitjudo.com/blog/2014/05/07/docker-scripts-updated</id>
    <content type="html"><![CDATA[<p>In a follow up to the original post <a href="">Docker Scripts</a>, Docker has made it so that you no longer need to have <code>jq</code> installed, you can do everything with the <code>docker</code> client&rsquo;s inspect command and its (semi)new format feature.</p>

<p>I&rsquo;ve updated the scripts to use the format command.</p>

<!-- more -->


<h2>Update Scripts</h2>

<h3>docker-get-ip</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-get-ip </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Usage: docker-get-ip <span class="o">(</span>name or sha<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> -n &amp;ldquo;<span class="nv">$1</span>&amp;rdquo; <span class="o">]</span> &amp;amp;&amp;amp; docker inspect &amp;mdash;format &amp;ldquo;<span class="o">}}</span>&amp;rdquo; <span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>docker-get-id</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-get-id </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Usage: docker-get-id <span class="o">(</span>friendly-name<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> -n &amp;ldquo;<span class="nv">$1</span>&amp;rdquo; <span class="o">]</span> &amp;amp;&amp;amp; docker inspect &amp;mdash;format &amp;ldquo;<span class="o">}}</span>&amp;rdquo; <span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>docker-get-image</h3>

<p>I find this one useful for DevOps uses, when I have the friendly name, I can compare the current running container&rsquo;s image with the one I expect it to have (like an update) and redeploy.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-get-image </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Usage: docker-get-image <span class="o">(</span>friendly-name<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> -n &amp;ldquo;<span class="nv">$1</span>&amp;rdquo; <span class="o">]</span> &amp;amp;&amp;amp; docker inspect &amp;mdash;format &amp;ldquo;<span class="o">}}</span>&amp;rdquo; <span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>docker-get-state</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker-get-state </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Usage: docker-get-state <span class="o">(</span>friendly-name<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> -n &amp;ldquo;<span class="nv">$1</span>&amp;rdquo; <span class="o">]</span> &amp;amp;&amp;amp; docker inspect &amp;mdash;format &amp;ldquo;<span class="o">}}</span>&amp;rdquo; <span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Conclusion</h2>

<p>These are just easy shortcuts, I&rsquo;m sure you can write these in different ways or as aliases. Perhaps others will find this useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analyzing an Android app with Docker and Androguard]]></title>
    <link href="http://bitjudo.com/blog/2014/04/24/analyzing-an-android-app-with-docker-and-androguard/"/>
    <updated>2014-04-24T19:48:05-04:00</updated>
    <id>http://bitjudo.com/blog/2014/04/24/analyzing-an-android-app-with-docker-and-androguard</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>Have you wanted to get into analyzing Android apps&mdash;for vulnerabilities,
malware, or just for fun? Maybe you&rsquo;ve experienced problems getting an
environment setup because of complex tool dependencies, long READMEs, or just
never really knew where to get started? This article can help. Using docker I
can show you how to tear apart your first Android application, and maybe even
find some vulnerabilities while you&rsquo;re at it.</p>

<!-- more -->


<h2>Dependencies</h2>

<p>I assume you have a working docker setup. If you aren&rsquo;t sure how to set it up
on your platform, try following one of these
<a href="http://docs.docker.io/installation/">guides</a>.</p>

<h2>Download the repo</h2>

<p>First check out the code from
<a href="https://github.com/dweinstein/dockerfile-androguard">github</a> by running <code>git
clone git@github.com:dweinstein/dockerfile-androguard.git</code> or <code>git clone
https://github.com/dweinstein/dockerfile-androguard.git</code>.</p>

<p>This repo uses a <code>Dockerfile</code> to declare all the dependencies that you would
need if you were going to install the
<a href="https://code.google.com/p/androguard/">Androguard</a> tool your self. If you want
to know how to do it all manually, you can
<a href="https://code.google.com/p/androguard/wiki/Installation">see</a> for yourself.</p>

<h2>Build</h2>

<p>After cloning the repository, <code>cd</code> into the directory and you should see something like this:</p>

<p><code>
➜  dockerfile-androguard git:(master) ls
Dockerfile     Makefile       README.md      data-container
</code></p>

<p>You can build by doing a <code>make build</code></p>

<h2>Run</h2>

<p>Once built, you have all you need to start analyzing your first app. I even put
an app in the repository for you to have something to play with right away! Just do a <code>make run</code>
and you should get something like this:</p>

<p><code>
➜  dockerfile-androguard git:(master) make run
make -C data-container build
docker build -t androguard-data .
Uploading context 133.1 kB
Uploading context
Step 0 : FROM busybox
 ---&gt; 769b9341d937
Step 1 : ADD apks /apks
 ---&gt; Using cache
 ---&gt; 595c1e66e01f
Step 2 : VOLUME ["/apks"]
 ---&gt; Using cache
 ---&gt; 7d40787633a5
Step 3 : VOLUME ["/notes"]
 ---&gt; Using cache
 ---&gt; c0dc7db54a78
Step 4 : CMD ["/bin/true"]
 ---&gt; Using cache
 ---&gt; 845911656aad
Successfully built 845911656aad
make -C data-container run
docker run --name androguard_data androguard-data &amp;&gt; /dev/null
make[1]: [run] Error 1 (ignored)
docker run -t -i --rm --volumes-from androguard_data androguard
/usr/local/lib/python2.7/dist-packages/ipython-2.0.0-py2.7.egg/IPython/frontend.py:30: UserWarning: The top-level `frontend` package has been deprecated. All its subpackages have been moved to the top `IPython` level.
  warn("The top-level `frontend` package has been deprecated. "
Androlyze version 2.0
In [1]:
</code></p>

<p>This is an interactive shell session where you can begin to play with the apk
which I stored under <code>data-container/apks/test.apk</code>. Inside the container though it&rsquo;ll
show up as <code>/apks/test.apk</code>.</p>

<p><code>
In [1]: ls -lh /apks/
total 128K
-rw-r--r-- 1 root root 125K Apr 23 15:10 test.apk
</code></p>

<p>Load the APK into our APK object:</p>

<p><code>
In [2]: apk = APK('apks/test.apk')
</code></p>

<p>List the files inside of it:</p>

<p><code>
In [3]: apk.get_files()
Out[3]:
[u'META-INF/MANIFEST.MF',
 u'META-INF/APKIL.SF',
 u'META-INF/APKIL.RSA',
 u'res/layout/activity_main.xml',
 u'res/menu/activity_main.xml',
 u'AndroidManifest.xml',
 u'resources.arsc',
 u'res/drawable-hdpi/ic_action_search.png',
 u'res/drawable-hdpi/ic_launcher.png',
 u'res/drawable-ldpi/ic_launcher.png',
 u'res/drawable-mdpi/ic_action_search.png',
 u'res/drawable-mdpi/ic_launcher.png',
 u'res/drawable-xhdpi/ic_action_search.png',
 u'res/drawable-xhdpi/ic_launcher.png',
 u'classes.dex']
</code></p>

<p>Load up some more complex analysis objects:</p>

<p>```
In [4]:  analysis = AnalyzeAPK(&lsquo;apks/test.apk&rsquo;)</p>

<p>In [5]: analysis
Out[5]:
(&lt;androguard.core.bytecodes.apk.APK instance at 0x1ce7c20>,
 &lt;androguard.core.bytecodes.dvm.DalvikVMFormat at 0x1cdbfd0>,
 &lt;androguard.core.analysis.analysis.uVMAnalysis instance at 0x326ed88>)
```</p>

<p>Get the application&rsquo;s <a href="http://developer.android.com/training/basics/activity-lifecycle/starting.html">main
activity</a>
(the first class that runs when the app starts&hellip;</p>

<p>```
In [6]: apk.get_main_activity()
Out[6]: u'com.example.gangrene.GangreneActivity'</p>

<p>```</p>

<p>Get all classes/methods that have the word <code>gangrene</code> in them:
<code>
In [7]: show_Paths(analysis[1], analysis[2].tainted_packages.search_packages('gangrene'))
1 Lcom/example/gangrene/GangreneActivity;-&gt;onCreate(Landroid/os/Bundle;)V (0x34) ---&gt; Lcom/example/gangrene/GangreneActivity$1;-&gt;&lt;init&gt;(Lcom/example/gangrene/GangreneActivity;)V
1 Lcom/example/gangrene/GangreneActivity$1;-&gt;onClick(Landroid/view/View;)V (0x1a) ---&gt; Lcom/example/gangrene/GangreneActivity;-&gt;startService(Landroid/content/Intent;)Landroid/content/ComponentName;
1 Lcom/example/gangrene/GangreneActivity;-&gt;onCreate(Landroid/os/Bundle;)V (0xa) ---&gt; Lcom/example/gangrene/GangreneActivity;-&gt;setContentView(I)V
1 Lcom/example/gangrene/GangreneActivity;-&gt;onCreate(Landroid/os/Bundle;)V (0x24) ---&gt; Lcom/example/gangrene/GangreneActivity;-&gt;findViewById(I)Landroid/view/View;
1 Lcom/example/gangrene/GangreneActivity;-&gt;onCreateOptionsMenu(Landroid/view/Menu;)Z (0x0) ---&gt; Lcom/example/gangrene/GangreneActivity;-&gt;getMenuInflater()Landroid/view/MenuInflater;
1 Lcom/example/gangrene/Feeder;-&gt;onCreate()V (0x54) ---&gt; Lcom/example/gangrene/Feeder$ServiceHandler;-&gt;&lt;init&gt;(Lcom/example/gangrene/Feeder; Landroid/os/Looper;)V
1 Lcom/example/gangrene/Feeder;-&gt;onStartCommand(Landroid/content/Intent; I I)I (0x52) ---&gt; Lcom/example/gangrene/Feeder$ServiceHandler;-&gt;obtainMessage()Landroid/os/Message;
1 Lcom/example/gangrene/Feeder;-&gt;onStartCommand(Landroid/content/Intent; I I)I (0x66) ---&gt; Lcom/example/gangrene/Feeder$ServiceHandler;-&gt;sendMessage(Landroid/os/Message;)Z
1 Lcom/example/gangrene/Feeder$ServiceHandler;-&gt;handleMessage(Landroid/os/Message;)V (0x2c) ---&gt; Lcom/example/gangrene/Feeder;-&gt;stopSelf(I)V
1 Lcom/example/gangrene/Feeder$ServiceHandler;-&gt;handleMessage(Landroid/os/Message;)V (0x6a) ---&gt; Lcom/example/gangrene/Feeder;-&gt;getFilesDir()Ljava/io/File;
1 Lcom/example/gangrene/Feeder$ServiceHandler;-&gt;handleMessage(Landroid/os/Message;)V (0xb6) ---&gt; Lcom/example/gangrene/Feeder;-&gt;access$0(Lcom/example/gangrene/Feeder;)I
</code></p>

<p>What&rsquo;s this <code>Feeder</code> thing?</p>

<p>Let&rsquo;s find all &ldquo;paths&rdquo; for the package name <code>Feeder</code>. This results in us seeing all
classes/methods that have the word <code>Feeder</code> in their package path.</p>

<p>```
In [8]: show_Paths(analysis[1], analysis[2].tainted_packages.search_packages(&lsquo;Feeder&rsquo;))
1 Lcom/example/gangrene/Feeder;&ndash;>onCreate()V (0x54) &mdash;&ndash;> Lcom/example/gangrene/Feeder$ServiceHandler;&ndash;><init>(Lcom/example/gangrene/Feeder; Landroid/os/Looper;)V
1 Lcom/example/gangrene/Feeder;&ndash;>onStartCommand(Landroid/content/Intent; I I)I (0x52) &mdash;&ndash;> Lcom/example/gangrene/Feeder$ServiceHandler;&ndash;>obtainMessage()Landroid/os/Message;
1 Lcom/example/gangrene/Feeder;&ndash;>onStartCommand(Landroid/content/Intent; I I)I (0x66) &mdash;&ndash;> Lcom/example/gangrene/Feeder$ServiceHandler;&ndash;>sendMessage(Landroid/os/Message;)Z
1 Lcom/example/gangrene/Feeder$ServiceHandler;&ndash;>handleMessage(Landroid/os/Message;)V (0x2c) &mdash;&ndash;> Lcom/example/gangrene/Feeder;&ndash;>stopSelf(I)V
1 Lcom/example/gangrene/Feeder$ServiceHandler;&ndash;>handleMessage(Landroid/os/Message;)V (0x6a) &mdash;&ndash;> Lcom/example/gangrene/Feeder;&ndash;>getFilesDir()Ljava/io/File;
1 Lcom/example/gangrene/Feeder$ServiceHandler;&ndash;>handleMessage(Landroid/os/Message;)V (0xb6) &mdash;&ndash;> Lcom/example/gangrene/Feeder;&ndash;>access$0(Lcom/example/gangrene/Feeder;)I</p>

<p>```</p>

<p>Cool, so Feeder looks like an android
<a href="http://developer.android.com/reference/android/app/Service.html">Service</a>.
What happens when the <code>handleMessage</code> gets called back? Let&rsquo;s decompile the
whole apk (using <a href="https://code.google.com/p/androguard/wiki/Decompiler">dad</a>),
but focus on the Feeder class for the moment:</p>

<p>```
In [9]: a, d, dx = AnalyzeAPK(&ldquo;apks/test.apk&rdquo;, decompiler=&ldquo;dad&rdquo;)
In [10]: print d.CLASS_Lcom_example_gangrene_Feeder.get_source()
package com.example.gangrene;
public class Feeder extends android.app.Service {</p>

<pre><code>final public java.util.Random randnumber;
final private long durSec;
private android.os.Looper mServiceLooper;
private int bufferLengthBytes;
private com.example.gangrene.Feeder$ServiceHandler mServiceHandler;
final private int iterations;
final public static String DTAG;
final private int fileSizeBytes;

public android.os.IBinder onBind(android.content.Intent p3)
{
    android.util.Log.e("Feeder", "in onBind in Feeder service");
    return 0;
}

public void onCreate()
{
    super.onCreate();
    android.util.Log.e("Feeder", "in onCreate in Feeder service");
    android.widget.Toast.makeText(this, "service created", 0).show();
    android.os.HandlerThread v0 = new android.os.HandlerThread("ServiceStartArguments", 10);
    v0.start();
    this.mServiceLooper = v0.getLooper();
    this.mServiceHandler = new com.example.gangrene.Feeder$ServiceHandler(this, this.mServiceLooper);
    return;
}
</code></pre>

<p>&hellip;
```</p>

<p>That&rsquo;s pretty darn readable&hellip; because the APK was not
<a href="http://developer.android.com/tools/help/proguard.html">obfuscated</a>.</p>

<p>But going back to what was said earlier, we&rsquo;re interested in the <code>handleMessage</code> callback:</p>

<p>```
In [11]: print d.CLASS_Lcom_example_gangrene_Feeder_ServiceHandler.METHOD_handleMessage.source()
public void handleMessage(android.os.Message p24)</p>

<pre><code>{
    int v5 = 0;
    while(true) {
        int v4 = (v5 + 1);
        try {
            java.io.FileInputStream v14.close();
            v5 = v4;
        } catch (java.io.IOException v17) {
            v5 = v4;
        }
    }
    v5 = v4;
}
</code></pre>

<p>```</p>

<p>That&rsquo;s odd, looks like an infinite loop that just closes an input stream (File)
over and over again&hellip; what a silly app. Looks like the author just wanted to
troll someone :&ndash;)</p>

<p>Here&rsquo;s what I think they meant to do:</p>

<p>```
int counter = 0;
while (counter++ &lt; iterations) {</p>

<p>  long endTime = System.currentTimeMillis() + durSec * 1000;
  FileOutputStream fout = null;
  FileInputStream rand = null;
  int bytesRead = 0;
  long startTime = 0;
  float deltaTms = 0;</p>

<p>  try {</p>

<pre><code>fout = new FileOutputStream(getFilesDir() + "/test.out");
rand = new FileInputStream("/dev/urandom");
byte buffer[] = new byte[bufferLengthBytes];

while (System.currentTimeMillis() &lt; endTime
    &amp;&amp; bytesRead &lt; fileSizeBytes) {
  synchronized (this) {
    try {
      //Log.d(DTAG, String.format("in job loop %d, bytes: %d", counter, bytesRead));
      bytesRead += rand.read(buffer);
      // tic
      startTime = System.currentTimeMillis();
      fout.write(buffer);
      //fout.flush();
      deltaTms += (System.currentTimeMillis() - startTime);
      // wait(sleepSec*1000);
    } catch (IOException e) {
      Log.d(DTAG, "error reading/writing bytes");
    } catch (Exception e) {
      Log.e(DTAG, "other error while in job loop");
    }
  }

}
//toc


if (deltaTms &gt; 0) {
  Log.d(DTAG,
      String.format(
        "wrote %d bytes in %f ms; effective write speed %f Mbytes/sec",
        bytesRead,
        deltaTms,
        Float.valueOf(bytesRead / 1024 / 1024
          / (deltaTms / 1000))));
}
...
</code></pre>

<p>```</p>

<h2>Conclusion</h2>

<p>More people should use docker to deploy tools to their community. It would make
everyone&rsquo;s life easier and less time would be spent dealing with dependencies
and more time getting stuff done.</p>

<p>Happy Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Efficient Dockerfiles - Node.js]]></title>
    <link href="http://bitjudo.com/blog/2014/03/13/building-efficient-dockerfiles-node-dot-js/"/>
    <updated>2014-03-13T09:34:02-04:00</updated>
    <id>http://bitjudo.com/blog/2014/03/13/building-efficient-dockerfiles-node-dot-js</id>
    <content type="html"><![CDATA[<h1>TL;DR</h1>

<p>Use the following code snippet (or a variation) after all your app dependencies
but before you ADD your app code to the container&hellip; this way you don&rsquo;t rebuild
your modules each time you re-build your container. If your <code>package.json</code> file
changes then your modules will be rebuilt. See this
<a href="https://gist.github.com/dweinstein/9550188">gist</a> for a full example.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Add this to your Dockerfile, after your deps, but before your app code. <a href="https://gist.github.com/dweinstein/9468644">https://gist.github.com/dweinstein/9468644</a> gist </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ADD package.json /tmp/package.json
</span><span class='line'>RUN cd /tmp &amp;amp;&amp;amp; npm install
</span><span class='line'>RUN mkdir -p /opt/app &amp;amp;&amp;amp; cp -a /tmp/node_modules /opt/app/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Using cached layers for modules</h1>

<p>This article is about making efficient use of docker layers. As a side effect
we&rsquo;ll see how to reduce development and debugging time for Node.js applications
hosted in Docker containers. As you migrate from developing everything on your
development host system to Docker, there are some growing pains&hellip; mainly
arround interactive modify-and-test workflows.</p>

<!-- more -->


<p>There was a time that whenever I&rsquo;d make a slight modification to an application
I&rsquo;d spend time waiting for docker containers to rebuild. Usually I was waiting
for the modules to be reinstalled.  I spent more time waiting for the
dependencies to build than actually fixing the problem. I hope this article
helps others get out of that cycle&hellip;</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>One key is to understand how Docker layers work. For now, visit the
<a href="http://docs.docker.io/en/latest/terms/layer/">documentation</a> to see a graphic
showing the various layers involved with Docker. Commands in your <code>Dockerfile</code>
will create new layers. When possible, docker will try to use an existing
cached layer if it&rsquo;s possible. You should try to take advantage of layers as
much as possible by organizing your commands in a specific order. We&rsquo;ll get
into that order in a second for dealing with node modules in your application.</p>

<p>First here&rsquo;s an example dependency file for Node:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Example &ndash; package.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">myApp</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">description</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">This</span> <span class="nx">is</span> <span class="nx">my</span> <span class="nx">awesome</span> <span class="nx">app</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">version</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="mf">0.0</span><span class="p">.</span><span class="mi">1</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="kr">private</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">scripts</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;start&quot;</span><span class="o">:</span> <span class="s2">&quot;node server.js&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">dependencies</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;docker.io&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;redis&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;restify&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And here&rsquo;s what we&rsquo;re going to insert into our old Dockerfile:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Add this to your Dockerfile, after your deps, but before your app code. <a href="https://gist.github.com/dweinstein/9468644">https://gist.github.com/dweinstein/9468644</a> gist </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ADD package.json /tmp/package.json
</span><span class='line'>RUN cd /tmp &amp;amp;&amp;amp; npm install
</span><span class='line'>RUN mkdir -p /opt/app &amp;amp;&amp;amp; cp -a /tmp/node_modules /opt/app/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This snippet should generally go after all dependencies of your application
are installed, but just before you add your application&rsquo;s code to the
container.</p>

<p>A <em>bad</em> <code>Dockerfile</code> could look like this:</p>

<p><div><script src='https://gist.github.com/9550778.js'></script>
<noscript><pre><code>FROM ubuntu

RUN echo &quot;deb http://archive.ubuntu.com/ubuntu precise main universe&quot; &gt; /etc/apt/sources.list
RUN apt-get update
RUN apt-get -y install python-software-properties git build-essential
RUN add-apt-repository -y ppa:chris-lea/node.js
RUN apt-get update
RUN apt-get -y install nodejs

WORKDIR /opt/app

ADD . /opt/app
RUN npm install
EXPOSE 3001

CMD [&quot;node&quot;, &quot;server.js&quot;]</code></pre></noscript></div>
</p>

<p>This is bad because we copy the app&rsquo;s working directory  on <a href="https://gist.github.com/dweinstein/9550778#file-bad-dockerfile-L12">line
12</a>&mdash;which
has our <code>package.json</code>&mdash;<code>.</code> to our container and then build the modules. This
results in our modules being built everytime we make a change to a file in <code>.</code>.</p>

<p>Here&rsquo;s a full example of a better implementation:</p>

<p><div><script src='https://gist.github.com/9550188.js?file=Dockerfile'></script>
<noscript><pre><code>FROM ubuntu
MAINTAINER David Weinstein &lt;david@bitjudo.com&gt;

# install our dependencies and nodejs
RUN echo &quot;deb http://archive.ubuntu.com/ubuntu precise main universe&quot; &gt; /etc/apt/sources.list
RUN apt-get update
RUN apt-get -y install python-software-properties git build-essential
RUN add-apt-repository -y ppa:chris-lea/node.js
RUN apt-get update
RUN apt-get -y install nodejs

# use changes to package.json to force Docker not to use the cache
# when we change our application's nodejs dependencies:
ADD package.json /tmp/package.json
RUN cd /tmp &amp;&amp; npm install
RUN mkdir -p /opt/app &amp;&amp; cp -a /tmp/node_modules /opt/app/

# From here we load our application's code in, therefore the previous docker
# &quot;layer&quot; thats been cached will be used if possible
WORKDIR /opt/app
ADD . /opt/app

EXPOSE 3000

CMD [&quot;node&quot;, &quot;server.js&quot;]
</code></pre></noscript></div>
</p>

<p>The idea here is that if the <code>package.json</code> file changes (<a href="https://gist.github.com/dweinstein/9550188#file-dockerfile-L14">line
14</a>) then
Docker will re-run the <code>npm install</code> sequence (<a href="https://gist.github.com/dweinstein/9550188#file-dockerfile-L15">line
15</a>)&hellip;
otherwise Docker will use our cache and skip that part.</p>

<p>Here&rsquo;s a log showing how building our Docker container is now using the <code>cache</code>
for the module dependency step when building the Dockerfile shown earlier.</p>

<p><div><script src='https://gist.github.com/9550105.js'></script>
<noscript><pre><code>Uploading context 4.608 kB
Uploading context 
Step 0 : FROM ubuntu
 ---&gt; 9cd978db300e
Step 1 : MAINTAINER David Weinstein &lt;david@bitjudo.com&gt;
 ---&gt; Using cache
 ---&gt; 67aeca8f12ae
Step 2 : RUN echo &quot;deb http://archive.ubuntu.com/ubuntu precise main universe&quot; &gt; /etc/apt/sources.list
 ---&gt; Using cache
 ---&gt; be8f73b1204f
Step 3 : RUN apt-get update
 ---&gt; Using cache
 ---&gt; 70395f80789a
Step 4 : RUN apt-get -y install python-software-properties git build-essential
 ---&gt; Using cache
 ---&gt; 58821e45ea25
Step 5 : RUN add-apt-repository -y ppa:chris-lea/node.js
 ---&gt; Using cache
 ---&gt; 79afb0c0539a
Step 6 : RUN apt-get update
 ---&gt; Using cache
 ---&gt; 18fc6aa866d8
Step 7 : RUN apt-get -y install nodejs
 ---&gt; Using cache
 ---&gt; 1f1f41f47329
Step 8 : ADD package.json /tmp/package.json
 ---&gt; Using cache
 ---&gt; 0331fd81b4c8
Step 9 : RUN cd /tmp &amp;&amp; npm install
 ---&gt; Using cache
 ---&gt; 95ee8b27b72b
Step 10 : RUN mkdir -p /opt/app &amp;&amp; cp -a /tmp/node_modules /opt/app/
 ---&gt; Using cache
 ---&gt; 40102f5ce4f1
Step 11 : WORKDIR /opt/app
 ---&gt; Using cache
 ---&gt; 6a1ad0dca915
Step 12 : ADD . /opt/app
 ---&gt; 6b9bdaa0e7a2
Step 13 : EXPOSE 3000
 ---&gt; Running in 722c8f0b88e2
 ---&gt; d97a3d372bda
Step 14 : CMD [&quot;node&quot;, &quot;server.js&quot;]
 ---&gt; Running in 3309a2dab1cc
 ---&gt; a0b19d7625d3
Successfully built a0b19d7625d3
</code></pre></noscript></div>
</p>

<p>This whole example is contained in this
<a href="https://gist.github.com/dweinstein/9550188">gist</a> so that you can repeat it
exactly as I have.</p>

<p>Assuming you&rsquo;ve built the container once before (i.e., <code>docker build -t
testProject .</code>), and then uncommented <a href="https://gist.github.com/dweinstein/9550188#file-server-js-L7">line
7</a> in our example
<code>server.js</code> the  above log shows what happens when we rebuild our container,
i.e., simulating a change to our app&rsquo;s logic. Looking at the log, on <a href="https://gist.github.com/dweinstein/9550105#file-gistfile1-txt-L32">line
32</a> the
<code>cache</code> was used but on <a href="https://gist.github.com/dweinstein/9550105#file-gistfile1-txt-L38">line
38</a> the
cache was <em>not</em> used&hellip;</p>

<h1>Conclusion</h1>

<p>Now our modules are cached so we aren&rsquo;t rebuilding them every time we change
our apps source code! This will speed up testing and debugging nodejs apps.
Also this caching technique can work for ruby gems which we&rsquo;ll talk about in
another post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authentication for a Docker Registry]]></title>
    <link href="http://bitjudo.com/blog/2014/03/12/authentication-for-a-docker-registry/"/>
    <updated>2014-03-12T10:48:18-04:00</updated>
    <id>http://bitjudo.com/blog/2014/03/12/authentication-for-a-docker-registry</id>
    <content type="html"><![CDATA[<p>Docker is an amazing tool that has only been around for a short while, but has taken the DevOps world by storm, and organizations from small to large are starting to use it from integration testing, to dynamically scaling an application&rsquo;s environment.</p>

<p>Docker released an open-source registry that allows you to remote store images you create with docker, but what the did not release is an open-source index. The index is arguably (depending on your use case) the most important part, it handles the authentication layer of a registry. A registry can be used without and index, and if you are just wanting a place to store your images and you don&rsquo;t want to worry about who can access them, then no need to read on.</p>

<!-- more -->


<p>For my job I needed a way to host images securely, but still allow various people inside and outside my organization to access certain images, so in my spare time (and since no one had done it yet that I could find) I started writing an index using Node.JS. It is currently in its infancy, but it works as of right now.</p>

<p>The project lives on github at <a href="https://github.com/ekristen/docker-index">docker-index</a> and it is setup as a trusted build and deployed to the public docker registry/index at <a href="https://index.docker.io/u/ekristen/docker-index/.">https://index.docker.io/u/ekristen/docker-index/.</a> Just run <code>docker pull ekristen/docker-index</code> to get started. Specific instructions on how to get the registry, index, and redis working together can be found on the project&rsquo;s <a href="https://github.com/ekristen/docker-index/blob/master/README.md#how-to-use">README</a></p>

<p>It has only one dependency at this time and that is redis, that will most likely change to use mongodb or maybe even mysql to store users, permissions, and other index data, but redis was a quick and simple medium when doing the intial prototyping.</p>

<p>My future plans for the index are to create an admin interface that facilitates the management of users, namespaces, repositories and their associate permissions. For now all that has to be done by editing the configuration file.</p>

<p>This was a big help for me, hopefully having this code out there can help others too.</p>

<p>If you are interested in helping out pull requests are always welcome. If you have feedback, let me know.</p>
]]></content>
  </entry>
  
</feed>
